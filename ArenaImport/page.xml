<ArenaPackage version="2011.1.100.6310">
  <Readme>
  </Readme>
  <Modules>
    <Module temp_module_id="-1" module_url="UserControls/Custom/WVC/WVC-Open-Giving/WVCPaymentWizard.ascx" module_name="WVC-Open-Giving" module_desc="" allows_child_modules="0" image_path="">
      <File path="UserControls/Custom/WVC/WVC-Open-Giving/WVCPaymentWizard.ascx"></File>
      <File path="UserControls/Custom/WVC/WVC-Open-Giving/WVCPaymentWizard.ascx.cs"></File>
    </Module>
    <Module temp_module_id="-2" module_url="UserControls/AdvHtmlText.ascx" module_name="Advance Html Text" module_desc="" allows_child_modules="0" image_path="">
      <File path="UserControls/AdvHtmlText.ascx">PCVAIGNvbnRyb2wgbGFuZ3VhZ2U9ImMjIiBpbmhlcml0cz0iQXJlbmFXZWIuVXNlckNvbnRyb2xzLkFkdkh0bWxUZXh0LCBBcmVuYSIgJT4NCjwlQCBSZWdpc3RlciBUYWdQcmVmaXg9IlRlbGVyaWsiIE5hbWVzcGFjZT0iVGVsZXJpay5XZWIuVUkiIEFzc2VtYmx5PSJUZWxlcmlrLldlYi5VSSIgJT4NCjxhc3A6VXBkYXRlUGFuZWwgSUQ9InBubFVwZGF0ZVBhbmVsIiBydW5hdD0ic2VydmVyIj4NCjxDb250ZW50VGVtcGxhdGU+DQogICAgPGFzcDpQYW5lbCBJRD0icG5sRWRpdEltYWdlIiBSdW5hdD0ic2VydmVyIiBDc3NDbGFzcz0iZWRpdEltYWdlIiBWaXNpYmxlPSJGYWxzZSI+PGFzcDpJbWFnZUJ1dHRvbiBJRD0iaWJFZGl0IiBJbWFnZVVybD0ifkltYWdlcy9lZGl0LmdpZiIgUnVuYXQ9InNlcnZlciIgQ2F1c2VzVmFsaWRhdGlvbj0iRmFsc2UiPjwvYXNwOkltYWdlQnV0dG9uPjwvYXNwOlBhbmVsPg0KICAgIDxhc3A6UGxhY2VIb2xkZXIgaWQ9Ikh0bWxIb2xkZXIiIHJ1bmF0PSJzZXJ2ZXIiPjwvYXNwOlBsYWNlSG9sZGVyPg0KICAgIDxhc3A6UGFuZWwgSUQ9InBubEVkaXQiIFJ1bmF0PSJzZXJ2ZXIiIENzc0NsYXNzPSJlZGl0V3JhcCIgVmlzaWJsZT0iRmFsc2UiPg0KICAgICAgICA8QXJlbmE6S2VlcEFsaXZlIElEPSJrZWVwTWVBbGl2ZSIgcnVuYXQ9InNlcnZlciIgLz4NCiAgICAgICAgPFRlbGVyaWs6UmFkRWRpdG9yIElEPSJyYWRFZGl0b3IiIHJ1bmF0PSJzZXJ2ZXIiIEltYWdlQWxsb3dlZEZpbGVUeXBlcz0iZ2lmLHBuZyxibXAsanBnIiAvPg0KPCUtLSAgICAgICAgPFRlbGVyaWs6UmFkU3BlbGwgSUQ9InJhZFNwZWxsIiBydW5hdD0ic2VydmVyIiBDb250cm9sVG9DaGVjaz0icmFkRWRpdG9yIiBTdXBwb3J0ZWRMYW5ndWFnZXM9ImVuLVVTLEVuZ2xpc2giIFZpc2libGU9ImZhbHNlIiAvPg0KLS0lPiAgICAgICAgPGFzcDpCdXR0b24gSUQ9ImJ0blNhdmUiIHJ1bmF0PSJzZXJ2ZXIiIENzc0NsYXNzPSJzbWFsbFRleHQiIE9uQ2xpY2s9ImJ0blNhdmVfQ2xpY2siIFRleHQ9IlNhdmUiIC8+DQogICAgICAgIDxhc3A6QnV0dG9uIElEPSJidG5DYW5jZWwiIHJ1bmF0PSJzZXJ2ZXIiIENzc0NsYXNzPSJzbWFsbFRleHQiIE9uQ2xpY2s9ImJ0bkNhbmNlbF9DbGljayIgVGV4dD0iQ2FuY2VsIiAvPg0KICAgIDwvYXNwOlBhbmVsPg0KPC9Db250ZW50VGVtcGxhdGU+DQo8L2FzcDpVcGRhdGVQYW5lbD4NCg==</File>
    </Module>
  </Modules>
  <Pages>
    <Page temp_page_id="-1" page_order="2147483647" display_in_nav="1" page_name="Open Giving" page_desc="This is a new page." page_settings="" require_ssl="0" guid="DC76D84F-F753-4451-BA6A-7F746789ED97" system_flag="0" friendly_url="" validate_request="1" menu_name="Open Giving" temp_parent_page_id="0">
      <ModuleInstance temp_module_instance_id="-1" module_title="WVC Open Giving" show_title="1" template_frame_name="Main" template_frame_order="2147483647" module_details="" system_flag="0" mandatory="0" movable="0" description="" image_path="" guid="D8CE92E5-227A-47CD-B2EB-DFE75DFBDC74" temp_module_id="-1" temp_page_id="-1" module_settings="CheckImageURL=https://mywvc.woodmenvalley.org/images/bankcheck.jpg;CommentCaption=Memo;DefaultFund1=1;DefaultFund2=2;FundList=1,2;LoginPage=3066;NewPersonCampus=1;NewPersonStatus=962" temp_page_or_template_id="-1" page_instance="1">
        <Setting name="CheckImageURL" value="https://mywvc.woodmenvalley.org/images/bankcheck.jpg" type_id="1" />
        <Setting name="CommentCaption" value="Memo" type_id="1" />
        <Setting name="DefaultFund1" value="1" type_id="1" />
        <Setting name="DefaultFund2" value="2" type_id="1" />
        <Setting name="FundList" value="1,2" type_id="1" />
        <Setting name="LoginPage" value="3066" type_id="3" guid="97301d18-7ddd-4ab4-8882-bdc356b2e1d2" />
        <Setting name="NewPersonCampus" value="1" type_id="19" />
        <Setting name="NewPersonStatus" value="962" type_id="10" guid="b0b56ec4-bc0c-4042-a41c-30cc8f0025cd" />
      </ModuleInstance>
      <ModuleInstance temp_module_instance_id="-2" module_title="New Module" show_title="1" template_frame_name="MainBottom" template_frame_order="2147483647" module_details="" system_flag="0" mandatory="0" movable="0" description="" image_path="" guid="7A442C77-0B59-4514-B808-576148C0233C" temp_module_id="-2" temp_page_id="-1" module_settings="" temp_page_or_template_id="-1" page_instance="1" />
    </Page>
  </Pages>
</ArenaPackage>